
UserInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000eac  00000f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080014a  0080014a  00000f8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024ed  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b19  00000000  00000000  00003631  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ac  00000000  00000000  0000414a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000053f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000842  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001400  00000000  00000000  00005f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000739e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c0       	rjmp	.+356    	; 0x19a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 34       	cpi	r26, 0x4A	; 74
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e4       	ldi	r26, 0x4A	; 74
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 36       	cpi	r26, 0x68	; 104
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	78 d6       	rcall	.+3312   	; 0xdb4 <main>
  c4:	f1 c6       	rjmp	.+3554   	; 0xea8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
  da:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tasksNum>
  de:	88 23       	and	r24, r24
  e0:	09 f4       	brne	.+2      	; 0xe4 <TimerISR+0x1c>
  e2:	53 c0       	rjmp	.+166    	; 0x18a <TimerISR+0xc2>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	1b e0       	ldi	r17, 0x0B	; 11
  e8:	c0 91 5d 01 	lds	r28, 0x015D	; 0x80015d <tasks>
  ec:	d0 91 5e 01 	lds	r29, 0x015E	; 0x80015e <tasks+0x1>
  f0:	18 9f       	mul	r17, r24
  f2:	c0 0d       	add	r28, r0
  f4:	d1 1d       	adc	r29, r1
  f6:	11 24       	eor	r1, r1
  f8:	4d 81       	ldd	r20, Y+5	; 0x05
  fa:	5e 81       	ldd	r21, Y+6	; 0x06
  fc:	6f 81       	ldd	r22, Y+7	; 0x07
  fe:	78 85       	ldd	r23, Y+8	; 0x08
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	ab 81       	ldd	r26, Y+3	; 0x03
 106:	bc 81       	ldd	r27, Y+4	; 0x04
 108:	48 17       	cp	r20, r24
 10a:	59 07       	cpc	r21, r25
 10c:	6a 07       	cpc	r22, r26
 10e:	7b 07       	cpc	r23, r27
 110:	b0 f0       	brcs	.+44     	; 0x13e <TimerISR+0x76>
 112:	88 81       	ld	r24, Y
 114:	e9 85       	ldd	r30, Y+9	; 0x09
 116:	fa 85       	ldd	r31, Y+10	; 0x0a
 118:	08 2e       	mov	r0, r24
 11a:	00 0c       	add	r0, r0
 11c:	99 0b       	sbc	r25, r25
 11e:	09 95       	icall
 120:	88 83       	st	Y, r24
 122:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 126:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <tasks>
 12a:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <tasks+0x1>
 12e:	18 9f       	mul	r17, r24
 130:	e0 0d       	add	r30, r0
 132:	f1 1d       	adc	r31, r1
 134:	11 24       	eor	r1, r1
 136:	15 82       	std	Z+5, r1	; 0x05
 138:	16 82       	std	Z+6, r1	; 0x06
 13a:	17 82       	std	Z+7, r1	; 0x07
 13c:	10 86       	std	Z+8, r1	; 0x08
 13e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 142:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <tasks>
 146:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <tasks+0x1>
 14a:	18 9f       	mul	r17, r24
 14c:	e0 0d       	add	r30, r0
 14e:	f1 1d       	adc	r31, r1
 150:	11 24       	eor	r1, r1
 152:	c5 80       	ldd	r12, Z+5	; 0x05
 154:	d6 80       	ldd	r13, Z+6	; 0x06
 156:	e7 80       	ldd	r14, Z+7	; 0x07
 158:	f0 84       	ldd	r15, Z+8	; 0x08
 15a:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <tasksPeriodGCD>
 15e:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <tasksPeriodGCD+0x1>
 162:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <tasksPeriodGCD+0x2>
 166:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <tasksPeriodGCD+0x3>
 16a:	4c 0d       	add	r20, r12
 16c:	5d 1d       	adc	r21, r13
 16e:	6e 1d       	adc	r22, r14
 170:	7f 1d       	adc	r23, r15
 172:	45 83       	std	Z+5, r20	; 0x05
 174:	56 83       	std	Z+6, r21	; 0x06
 176:	67 83       	std	Z+7, r22	; 0x07
 178:	70 87       	std	Z+8, r23	; 0x08
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
 180:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <tasksNum>
 184:	89 17       	cp	r24, r25
 186:	08 f4       	brcc	.+2      	; 0x18a <TimerISR+0xc2>
 188:	af cf       	rjmp	.-162    	; 0xe8 <TimerISR+0x20>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <__vector_13>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tasksPeriodCntDown>
 1c4:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <tasksPeriodCntDown+0x1>
 1c8:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <tasksPeriodCntDown+0x2>
 1cc:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <tasksPeriodCntDown+0x3>
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	a1 09       	sbc	r26, r1
 1d4:	b1 09       	sbc	r27, r1
 1d6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tasksPeriodCntDown>
 1da:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tasksPeriodCntDown+0x1>
 1de:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <tasksPeriodCntDown+0x2>
 1e2:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <tasksPeriodCntDown+0x3>
 1e6:	89 2b       	or	r24, r25
 1e8:	8a 2b       	or	r24, r26
 1ea:	8b 2b       	or	r24, r27
 1ec:	89 f4       	brne	.+34     	; 0x210 <__vector_13+0x76>
 1ee:	6c df       	rcall	.-296    	; 0xc8 <TimerISR>
 1f0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tasksPeriodGCD>
 1f4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tasksPeriodGCD+0x1>
 1f8:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tasksPeriodGCD+0x2>
 1fc:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tasksPeriodGCD+0x3>
 200:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tasksPeriodCntDown>
 204:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tasksPeriodCntDown+0x1>
 208:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <tasksPeriodCntDown+0x2>
 20c:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <tasksPeriodCntDown+0x3>
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0b be       	out	0x3b, r0	; 59
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <TimerSet>:
 236:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <tasksPeriodGCD>
 23a:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <tasksPeriodGCD+0x1>
 23e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <tasksPeriodGCD+0x2>
 242:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <tasksPeriodGCD+0x3>
 246:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <tasksPeriodCntDown>
 24a:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <tasksPeriodCntDown+0x1>
 24e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <tasksPeriodCntDown+0x2>
 252:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <tasksPeriodCntDown+0x3>
 256:	08 95       	ret

00000258 <TimerOn>:
 258:	8b e0       	ldi	r24, 0x0B	; 11
 25a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 25e:	8d e7       	ldi	r24, 0x7D	; 125
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 266:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 270:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 274:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 278:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tasksPeriodGCD>
 27c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tasksPeriodGCD+0x1>
 280:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tasksPeriodGCD+0x2>
 284:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tasksPeriodGCD+0x3>
 288:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tasksPeriodCntDown>
 28c:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tasksPeriodCntDown+0x1>
 290:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <tasksPeriodCntDown+0x2>
 294:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <tasksPeriodCntDown+0x3>
 298:	8f b7       	in	r24, 0x3f	; 63
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	8f bf       	out	0x3f, r24	; 63
 29e:	08 95       	ret

000002a0 <pinChange>:
 2a0:	67 2b       	or	r22, r23
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <pinChange+0x6>
 2a4:	9f c0       	rjmp	.+318    	; 0x3e4 <pinChange+0x144>
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	11 f4       	brne	.+4      	; 0x2ae <pinChange+0xe>
 2aa:	10 98       	cbi	0x02, 0	; 2
 2ac:	08 95       	ret
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	91 05       	cpc	r25, r1
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <pinChange+0x18>
 2b4:	11 98       	cbi	0x02, 1	; 2
 2b6:	08 95       	ret
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	91 05       	cpc	r25, r1
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <pinChange+0x22>
 2be:	12 98       	cbi	0x02, 2	; 2
 2c0:	08 95       	ret
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	91 05       	cpc	r25, r1
 2c6:	11 f4       	brne	.+4      	; 0x2cc <pinChange+0x2c>
 2c8:	13 98       	cbi	0x02, 3	; 2
 2ca:	08 95       	ret
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	91 05       	cpc	r25, r1
 2d0:	11 f4       	brne	.+4      	; 0x2d6 <pinChange+0x36>
 2d2:	14 98       	cbi	0x02, 4	; 2
 2d4:	08 95       	ret
 2d6:	85 30       	cpi	r24, 0x05	; 5
 2d8:	91 05       	cpc	r25, r1
 2da:	11 f4       	brne	.+4      	; 0x2e0 <pinChange+0x40>
 2dc:	15 98       	cbi	0x02, 5	; 2
 2de:	08 95       	ret
 2e0:	86 30       	cpi	r24, 0x06	; 6
 2e2:	91 05       	cpc	r25, r1
 2e4:	11 f4       	brne	.+4      	; 0x2ea <pinChange+0x4a>
 2e6:	16 98       	cbi	0x02, 6	; 2
 2e8:	08 95       	ret
 2ea:	87 30       	cpi	r24, 0x07	; 7
 2ec:	91 05       	cpc	r25, r1
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <pinChange+0x54>
 2f0:	17 98       	cbi	0x02, 7	; 2
 2f2:	08 95       	ret
 2f4:	8a 30       	cpi	r24, 0x0A	; 10
 2f6:	91 05       	cpc	r25, r1
 2f8:	11 f4       	brne	.+4      	; 0x2fe <pinChange+0x5e>
 2fa:	28 98       	cbi	0x05, 0	; 5
 2fc:	08 95       	ret
 2fe:	8b 30       	cpi	r24, 0x0B	; 11
 300:	91 05       	cpc	r25, r1
 302:	11 f4       	brne	.+4      	; 0x308 <pinChange+0x68>
 304:	29 98       	cbi	0x05, 1	; 5
 306:	08 95       	ret
 308:	8c 30       	cpi	r24, 0x0C	; 12
 30a:	91 05       	cpc	r25, r1
 30c:	11 f4       	brne	.+4      	; 0x312 <pinChange+0x72>
 30e:	2a 98       	cbi	0x05, 2	; 5
 310:	08 95       	ret
 312:	8d 30       	cpi	r24, 0x0D	; 13
 314:	91 05       	cpc	r25, r1
 316:	11 f4       	brne	.+4      	; 0x31c <pinChange+0x7c>
 318:	2b 98       	cbi	0x05, 3	; 5
 31a:	08 95       	ret
 31c:	8e 30       	cpi	r24, 0x0E	; 14
 31e:	91 05       	cpc	r25, r1
 320:	11 f4       	brne	.+4      	; 0x326 <pinChange+0x86>
 322:	2c 98       	cbi	0x05, 4	; 5
 324:	08 95       	ret
 326:	8f 30       	cpi	r24, 0x0F	; 15
 328:	91 05       	cpc	r25, r1
 32a:	11 f4       	brne	.+4      	; 0x330 <pinChange+0x90>
 32c:	2d 98       	cbi	0x05, 5	; 5
 32e:	08 95       	ret
 330:	80 31       	cpi	r24, 0x10	; 16
 332:	91 05       	cpc	r25, r1
 334:	11 f4       	brne	.+4      	; 0x33a <pinChange+0x9a>
 336:	2e 98       	cbi	0x05, 6	; 5
 338:	08 95       	ret
 33a:	81 31       	cpi	r24, 0x11	; 17
 33c:	91 05       	cpc	r25, r1
 33e:	11 f4       	brne	.+4      	; 0x344 <pinChange+0xa4>
 340:	2f 98       	cbi	0x05, 7	; 5
 342:	08 95       	ret
 344:	84 31       	cpi	r24, 0x14	; 20
 346:	91 05       	cpc	r25, r1
 348:	11 f4       	brne	.+4      	; 0x34e <pinChange+0xae>
 34a:	40 98       	cbi	0x08, 0	; 8
 34c:	08 95       	ret
 34e:	85 31       	cpi	r24, 0x15	; 21
 350:	91 05       	cpc	r25, r1
 352:	11 f4       	brne	.+4      	; 0x358 <pinChange+0xb8>
 354:	41 98       	cbi	0x08, 1	; 8
 356:	08 95       	ret
 358:	86 31       	cpi	r24, 0x16	; 22
 35a:	91 05       	cpc	r25, r1
 35c:	11 f4       	brne	.+4      	; 0x362 <pinChange+0xc2>
 35e:	42 98       	cbi	0x08, 2	; 8
 360:	08 95       	ret
 362:	87 31       	cpi	r24, 0x17	; 23
 364:	91 05       	cpc	r25, r1
 366:	11 f4       	brne	.+4      	; 0x36c <pinChange+0xcc>
 368:	43 98       	cbi	0x08, 3	; 8
 36a:	08 95       	ret
 36c:	88 31       	cpi	r24, 0x18	; 24
 36e:	91 05       	cpc	r25, r1
 370:	11 f4       	brne	.+4      	; 0x376 <pinChange+0xd6>
 372:	44 98       	cbi	0x08, 4	; 8
 374:	08 95       	ret
 376:	89 31       	cpi	r24, 0x19	; 25
 378:	91 05       	cpc	r25, r1
 37a:	11 f4       	brne	.+4      	; 0x380 <pinChange+0xe0>
 37c:	45 98       	cbi	0x08, 5	; 8
 37e:	08 95       	ret
 380:	8a 31       	cpi	r24, 0x1A	; 26
 382:	91 05       	cpc	r25, r1
 384:	11 f4       	brne	.+4      	; 0x38a <pinChange+0xea>
 386:	46 98       	cbi	0x08, 6	; 8
 388:	08 95       	ret
 38a:	8b 31       	cpi	r24, 0x1B	; 27
 38c:	91 05       	cpc	r25, r1
 38e:	11 f4       	brne	.+4      	; 0x394 <pinChange+0xf4>
 390:	47 98       	cbi	0x08, 7	; 8
 392:	08 95       	ret
 394:	8e 31       	cpi	r24, 0x1E	; 30
 396:	91 05       	cpc	r25, r1
 398:	11 f4       	brne	.+4      	; 0x39e <pinChange+0xfe>
 39a:	58 98       	cbi	0x0b, 0	; 11
 39c:	08 95       	ret
 39e:	8f 31       	cpi	r24, 0x1F	; 31
 3a0:	91 05       	cpc	r25, r1
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <pinChange+0x108>
 3a4:	59 98       	cbi	0x0b, 1	; 11
 3a6:	08 95       	ret
 3a8:	80 32       	cpi	r24, 0x20	; 32
 3aa:	91 05       	cpc	r25, r1
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <pinChange+0x112>
 3ae:	5a 98       	cbi	0x0b, 2	; 11
 3b0:	08 95       	ret
 3b2:	81 32       	cpi	r24, 0x21	; 33
 3b4:	91 05       	cpc	r25, r1
 3b6:	11 f4       	brne	.+4      	; 0x3bc <pinChange+0x11c>
 3b8:	5b 98       	cbi	0x0b, 3	; 11
 3ba:	08 95       	ret
 3bc:	82 32       	cpi	r24, 0x22	; 34
 3be:	91 05       	cpc	r25, r1
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <pinChange+0x126>
 3c2:	5c 98       	cbi	0x0b, 4	; 11
 3c4:	08 95       	ret
 3c6:	83 32       	cpi	r24, 0x23	; 35
 3c8:	91 05       	cpc	r25, r1
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <pinChange+0x130>
 3cc:	5d 98       	cbi	0x0b, 5	; 11
 3ce:	08 95       	ret
 3d0:	84 32       	cpi	r24, 0x24	; 36
 3d2:	91 05       	cpc	r25, r1
 3d4:	11 f4       	brne	.+4      	; 0x3da <pinChange+0x13a>
 3d6:	5e 98       	cbi	0x0b, 6	; 11
 3d8:	08 95       	ret
 3da:	85 97       	sbiw	r24, 0x25	; 37
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <pinChange+0x140>
 3de:	9f c0       	rjmp	.+318    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 3e0:	5f 98       	cbi	0x0b, 7	; 11
 3e2:	08 95       	ret
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	11 f4       	brne	.+4      	; 0x3ec <pinChange+0x14c>
 3e8:	10 9a       	sbi	0x02, 0	; 2
 3ea:	08 95       	ret
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	91 05       	cpc	r25, r1
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <pinChange+0x156>
 3f2:	11 9a       	sbi	0x02, 1	; 2
 3f4:	08 95       	ret
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	91 05       	cpc	r25, r1
 3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	12 9a       	sbi	0x02, 2	; 2
 3fe:	08 95       	ret
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	91 05       	cpc	r25, r1
 404:	11 f4       	brne	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	13 9a       	sbi	0x02, 3	; 2
 408:	08 95       	ret
 40a:	84 30       	cpi	r24, 0x04	; 4
 40c:	91 05       	cpc	r25, r1
 40e:	11 f4       	brne	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	14 9a       	sbi	0x02, 4	; 2
 412:	08 95       	ret
 414:	85 30       	cpi	r24, 0x05	; 5
 416:	91 05       	cpc	r25, r1
 418:	11 f4       	brne	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	15 9a       	sbi	0x02, 5	; 2
 41c:	08 95       	ret
 41e:	86 30       	cpi	r24, 0x06	; 6
 420:	91 05       	cpc	r25, r1
 422:	11 f4       	brne	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	16 9a       	sbi	0x02, 6	; 2
 426:	08 95       	ret
 428:	87 30       	cpi	r24, 0x07	; 7
 42a:	91 05       	cpc	r25, r1
 42c:	11 f4       	brne	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	17 9a       	sbi	0x02, 7	; 2
 430:	08 95       	ret
 432:	8a 30       	cpi	r24, 0x0A	; 10
 434:	91 05       	cpc	r25, r1
 436:	11 f4       	brne	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	28 9a       	sbi	0x05, 0	; 5
 43a:	08 95       	ret
 43c:	8b 30       	cpi	r24, 0x0B	; 11
 43e:	91 05       	cpc	r25, r1
 440:	11 f4       	brne	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	29 9a       	sbi	0x05, 1	; 5
 444:	08 95       	ret
 446:	8c 30       	cpi	r24, 0x0C	; 12
 448:	91 05       	cpc	r25, r1
 44a:	11 f4       	brne	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	2a 9a       	sbi	0x05, 2	; 5
 44e:	08 95       	ret
 450:	8d 30       	cpi	r24, 0x0D	; 13
 452:	91 05       	cpc	r25, r1
 454:	11 f4       	brne	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 456:	2b 9a       	sbi	0x05, 3	; 5
 458:	08 95       	ret
 45a:	8e 30       	cpi	r24, 0x0E	; 14
 45c:	91 05       	cpc	r25, r1
 45e:	11 f4       	brne	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	2c 9a       	sbi	0x05, 4	; 5
 462:	08 95       	ret
 464:	8f 30       	cpi	r24, 0x0F	; 15
 466:	91 05       	cpc	r25, r1
 468:	11 f4       	brne	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46a:	2d 9a       	sbi	0x05, 5	; 5
 46c:	08 95       	ret
 46e:	80 31       	cpi	r24, 0x10	; 16
 470:	91 05       	cpc	r25, r1
 472:	11 f4       	brne	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	2e 9a       	sbi	0x05, 6	; 5
 476:	08 95       	ret
 478:	81 31       	cpi	r24, 0x11	; 17
 47a:	91 05       	cpc	r25, r1
 47c:	11 f4       	brne	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47e:	2f 9a       	sbi	0x05, 7	; 5
 480:	08 95       	ret
 482:	84 31       	cpi	r24, 0x14	; 20
 484:	91 05       	cpc	r25, r1
 486:	11 f4       	brne	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 488:	40 9a       	sbi	0x08, 0	; 8
 48a:	08 95       	ret
 48c:	85 31       	cpi	r24, 0x15	; 21
 48e:	91 05       	cpc	r25, r1
 490:	11 f4       	brne	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 492:	41 9a       	sbi	0x08, 1	; 8
 494:	08 95       	ret
 496:	86 31       	cpi	r24, 0x16	; 22
 498:	91 05       	cpc	r25, r1
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49c:	42 9a       	sbi	0x08, 2	; 8
 49e:	08 95       	ret
 4a0:	87 31       	cpi	r24, 0x17	; 23
 4a2:	91 05       	cpc	r25, r1
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a6:	43 9a       	sbi	0x08, 3	; 8
 4a8:	08 95       	ret
 4aa:	88 31       	cpi	r24, 0x18	; 24
 4ac:	91 05       	cpc	r25, r1
 4ae:	11 f4       	brne	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b0:	44 9a       	sbi	0x08, 4	; 8
 4b2:	08 95       	ret
 4b4:	89 31       	cpi	r24, 0x19	; 25
 4b6:	91 05       	cpc	r25, r1
 4b8:	11 f4       	brne	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	45 9a       	sbi	0x08, 5	; 8
 4bc:	08 95       	ret
 4be:	8a 31       	cpi	r24, 0x1A	; 26
 4c0:	91 05       	cpc	r25, r1
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c4:	46 9a       	sbi	0x08, 6	; 8
 4c6:	08 95       	ret
 4c8:	8b 31       	cpi	r24, 0x1B	; 27
 4ca:	91 05       	cpc	r25, r1
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4ce:	47 9a       	sbi	0x08, 7	; 8
 4d0:	08 95       	ret
 4d2:	8e 31       	cpi	r24, 0x1E	; 30
 4d4:	91 05       	cpc	r25, r1
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d8:	58 9a       	sbi	0x0b, 0	; 11
 4da:	08 95       	ret
 4dc:	8f 31       	cpi	r24, 0x1F	; 31
 4de:	91 05       	cpc	r25, r1
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	59 9a       	sbi	0x0b, 1	; 11
 4e4:	08 95       	ret
 4e6:	80 32       	cpi	r24, 0x20	; 32
 4e8:	91 05       	cpc	r25, r1
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ec:	5a 9a       	sbi	0x0b, 2	; 11
 4ee:	08 95       	ret
 4f0:	81 32       	cpi	r24, 0x21	; 33
 4f2:	91 05       	cpc	r25, r1
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f6:	5b 9a       	sbi	0x0b, 3	; 11
 4f8:	08 95       	ret
 4fa:	82 32       	cpi	r24, 0x22	; 34
 4fc:	91 05       	cpc	r25, r1
 4fe:	11 f4       	brne	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 500:	5c 9a       	sbi	0x0b, 4	; 11
 502:	08 95       	ret
 504:	83 32       	cpi	r24, 0x23	; 35
 506:	91 05       	cpc	r25, r1
 508:	11 f4       	brne	.+4      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50a:	5d 9a       	sbi	0x0b, 5	; 11
 50c:	08 95       	ret
 50e:	84 32       	cpi	r24, 0x24	; 36
 510:	91 05       	cpc	r25, r1
 512:	11 f4       	brne	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 514:	5e 9a       	sbi	0x0b, 6	; 11
 516:	08 95       	ret
 518:	85 97       	sbiw	r24, 0x25	; 37
 51a:	09 f4       	brne	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51c:	5f 9a       	sbi	0x0b, 7	; 11
 51e:	08 95       	ret

00000520 <Lcd8_Port>:
 520:	cf 93       	push	r28
 522:	c8 2f       	mov	r28, r24
 524:	80 ff       	sbrs	r24, 0
 526:	06 c0       	rjmp	.+12     	; 0x534 <Lcd8_Port+0x14>
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	b7 de       	rcall	.-658    	; 0x2a0 <pinChange>
 532:	05 c0       	rjmp	.+10     	; 0x53e <Lcd8_Port+0x1e>
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	b1 de       	rcall	.-670    	; 0x2a0 <pinChange>
 53e:	c1 ff       	sbrs	r28, 1
 540:	06 c0       	rjmp	.+12     	; 0x54e <Lcd8_Port+0x2e>
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	aa de       	rcall	.-684    	; 0x2a0 <pinChange>
 54c:	05 c0       	rjmp	.+10     	; 0x558 <Lcd8_Port+0x38>
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	a4 de       	rcall	.-696    	; 0x2a0 <pinChange>
 558:	c2 ff       	sbrs	r28, 2
 55a:	06 c0       	rjmp	.+12     	; 0x568 <Lcd8_Port+0x48>
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	9d de       	rcall	.-710    	; 0x2a0 <pinChange>
 566:	05 c0       	rjmp	.+10     	; 0x572 <Lcd8_Port+0x52>
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	97 de       	rcall	.-722    	; 0x2a0 <pinChange>
 572:	c3 ff       	sbrs	r28, 3
 574:	06 c0       	rjmp	.+12     	; 0x582 <Lcd8_Port+0x62>
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 de       	rcall	.-736    	; 0x2a0 <pinChange>
 580:	05 c0       	rjmp	.+10     	; 0x58c <Lcd8_Port+0x6c>
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	8a de       	rcall	.-748    	; 0x2a0 <pinChange>
 58c:	c4 ff       	sbrs	r28, 4
 58e:	06 c0       	rjmp	.+12     	; 0x59c <Lcd8_Port+0x7c>
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	83 de       	rcall	.-762    	; 0x2a0 <pinChange>
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <Lcd8_Port+0x86>
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	84 e0       	ldi	r24, 0x04	; 4
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	7d de       	rcall	.-774    	; 0x2a0 <pinChange>
 5a6:	c5 ff       	sbrs	r28, 5
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <Lcd8_Port+0x96>
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	76 de       	rcall	.-788    	; 0x2a0 <pinChange>
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <Lcd8_Port+0xa0>
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	85 e0       	ldi	r24, 0x05	; 5
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	70 de       	rcall	.-800    	; 0x2a0 <pinChange>
 5c0:	c6 ff       	sbrs	r28, 6
 5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <Lcd8_Port+0xb0>
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	69 de       	rcall	.-814    	; 0x2a0 <pinChange>
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <Lcd8_Port+0xba>
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	86 e0       	ldi	r24, 0x06	; 6
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	63 de       	rcall	.-826    	; 0x2a0 <pinChange>
 5da:	cc 23       	and	r28, r28
 5dc:	34 f4       	brge	.+12     	; 0x5ea <Lcd8_Port+0xca>
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	87 e0       	ldi	r24, 0x07	; 7
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	5c de       	rcall	.-840    	; 0x2a0 <pinChange>
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <Lcd8_Port+0xd4>
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	87 e0       	ldi	r24, 0x07	; 7
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	56 de       	rcall	.-852    	; 0x2a0 <pinChange>
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <Lcd8_Cmd>:
 5f8:	cf 93       	push	r28
 5fa:	c8 2f       	mov	r28, r24
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	80 e1       	ldi	r24, 0x10	; 16
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	4d de       	rcall	.-870    	; 0x2a0 <pinChange>
 606:	8c 2f       	mov	r24, r28
 608:	8b df       	rcall	.-234    	; 0x520 <Lcd8_Port>
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	81 e1       	ldi	r24, 0x11	; 17
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	46 de       	rcall	.-884    	; 0x2a0 <pinChange>
 614:	89 ef       	ldi	r24, 0xF9	; 249
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <Lcd8_Cmd+0x20>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <Lcd8_Cmd+0x26>
 61e:	00 00       	nop
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	81 e1       	ldi	r24, 0x11	; 17
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	3b de       	rcall	.-906    	; 0x2a0 <pinChange>
 62a:	89 ef       	ldi	r24, 0xF9	; 249
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <Lcd8_Cmd+0x36>
 632:	00 c0       	rjmp	.+0      	; 0x634 <Lcd8_Cmd+0x3c>
 634:	00 00       	nop
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <Lcd8_Clear>:
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	dd cf       	rjmp	.-70     	; 0x5f8 <Lcd8_Cmd>
 63e:	08 95       	ret

00000640 <Lcd8_Init>:
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	80 e1       	ldi	r24, 0x10	; 16
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	2b de       	rcall	.-938    	; 0x2a0 <pinChange>
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	81 e1       	ldi	r24, 0x11	; 17
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	26 de       	rcall	.-948    	; 0x2a0 <pinChange>
 654:	87 e8       	ldi	r24, 0x87	; 135
 656:	93 e1       	ldi	r25, 0x13	; 19
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <Lcd8_Init+0x18>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <Lcd8_Init+0x1e>
 65e:	00 00       	nop
 660:	80 e3       	ldi	r24, 0x30	; 48
 662:	ca df       	rcall	.-108    	; 0x5f8 <Lcd8_Cmd>
 664:	81 ee       	ldi	r24, 0xE1	; 225
 666:	94 e0       	ldi	r25, 0x04	; 4
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <Lcd8_Init+0x28>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <Lcd8_Init+0x2e>
 66e:	00 00       	nop
 670:	80 e3       	ldi	r24, 0x30	; 48
 672:	c2 df       	rcall	.-124    	; 0x5f8 <Lcd8_Cmd>
 674:	89 ef       	ldi	r24, 0xF9	; 249
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <Lcd8_Init+0x38>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <Lcd8_Init+0x3e>
 67e:	00 00       	nop
 680:	80 e3       	ldi	r24, 0x30	; 48
 682:	ba df       	rcall	.-140    	; 0x5f8 <Lcd8_Cmd>
 684:	83 ec       	ldi	r24, 0xC3	; 195
 686:	99 e0       	ldi	r25, 0x09	; 9
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <Lcd8_Init+0x48>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <Lcd8_Init+0x4e>
 68e:	00 00       	nop
 690:	88 e3       	ldi	r24, 0x38	; 56
 692:	b2 df       	rcall	.-156    	; 0x5f8 <Lcd8_Cmd>
 694:	8c e0       	ldi	r24, 0x0C	; 12
 696:	b0 df       	rcall	.-160    	; 0x5f8 <Lcd8_Cmd>
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	ae df       	rcall	.-164    	; 0x5f8 <Lcd8_Cmd>
 69c:	86 e0       	ldi	r24, 0x06	; 6
 69e:	ac cf       	rjmp	.-168    	; 0x5f8 <Lcd8_Cmd>
 6a0:	08 95       	ret

000006a2 <Lcd8_Write_Char>:
 6a2:	cf 93       	push	r28
 6a4:	c8 2f       	mov	r28, r24
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	80 e1       	ldi	r24, 0x10	; 16
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	f8 dd       	rcall	.-1040   	; 0x2a0 <pinChange>
 6b0:	8c 2f       	mov	r24, r28
 6b2:	36 df       	rcall	.-404    	; 0x520 <Lcd8_Port>
 6b4:	61 e0       	ldi	r22, 0x01	; 1
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	81 e1       	ldi	r24, 0x11	; 17
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	f1 dd       	rcall	.-1054   	; 0x2a0 <pinChange>
 6be:	89 ef       	ldi	r24, 0xF9	; 249
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <Lcd8_Write_Char+0x20>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <Lcd8_Write_Char+0x26>
 6c8:	00 00       	nop
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	81 e1       	ldi	r24, 0x11	; 17
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	e6 dd       	rcall	.-1076   	; 0x2a0 <pinChange>
 6d4:	89 ef       	ldi	r24, 0xF9	; 249
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <Lcd8_Write_Char+0x36>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <Lcd8_Write_Char+0x3c>
 6de:	00 00       	nop
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <Lcd8_Write_String>:
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	ec 01       	movw	r28, r24
 6ea:	88 81       	ld	r24, Y
 6ec:	88 23       	and	r24, r24
 6ee:	29 f0       	breq	.+10     	; 0x6fa <Lcd8_Write_String+0x16>
 6f0:	21 96       	adiw	r28, 0x01	; 1
 6f2:	d7 df       	rcall	.-82     	; 0x6a2 <Lcd8_Write_Char>
 6f4:	89 91       	ld	r24, Y+
 6f6:	81 11       	cpse	r24, r1
 6f8:	fc cf       	rjmp	.-8      	; 0x6f2 <Lcd8_Write_String+0xe>
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	08 95       	ret

00000700 <GetKeypadKey>:
 700:	8f ee       	ldi	r24, 0xEF	; 239
 702:	88 b9       	out	0x08, r24	; 8
 704:	00 00       	nop
 706:	30 9b       	sbis	0x06, 0	; 6
 708:	29 c0       	rjmp	.+82     	; 0x75c <GetKeypadKey+0x5c>
 70a:	31 9b       	sbis	0x06, 1	; 6
 70c:	29 c0       	rjmp	.+82     	; 0x760 <GetKeypadKey+0x60>
 70e:	32 9b       	sbis	0x06, 2	; 6
 710:	29 c0       	rjmp	.+82     	; 0x764 <GetKeypadKey+0x64>
 712:	33 9b       	sbis	0x06, 3	; 6
 714:	29 c0       	rjmp	.+82     	; 0x768 <GetKeypadKey+0x68>
 716:	8f ed       	ldi	r24, 0xDF	; 223
 718:	88 b9       	out	0x08, r24	; 8
 71a:	00 00       	nop
 71c:	30 9b       	sbis	0x06, 0	; 6
 71e:	26 c0       	rjmp	.+76     	; 0x76c <GetKeypadKey+0x6c>
 720:	31 9b       	sbis	0x06, 1	; 6
 722:	26 c0       	rjmp	.+76     	; 0x770 <GetKeypadKey+0x70>
 724:	32 9b       	sbis	0x06, 2	; 6
 726:	26 c0       	rjmp	.+76     	; 0x774 <GetKeypadKey+0x74>
 728:	33 9b       	sbis	0x06, 3	; 6
 72a:	26 c0       	rjmp	.+76     	; 0x778 <GetKeypadKey+0x78>
 72c:	8f eb       	ldi	r24, 0xBF	; 191
 72e:	88 b9       	out	0x08, r24	; 8
 730:	00 00       	nop
 732:	30 9b       	sbis	0x06, 0	; 6
 734:	23 c0       	rjmp	.+70     	; 0x77c <GetKeypadKey+0x7c>
 736:	31 9b       	sbis	0x06, 1	; 6
 738:	23 c0       	rjmp	.+70     	; 0x780 <GetKeypadKey+0x80>
 73a:	32 9b       	sbis	0x06, 2	; 6
 73c:	23 c0       	rjmp	.+70     	; 0x784 <GetKeypadKey+0x84>
 73e:	33 9b       	sbis	0x06, 3	; 6
 740:	23 c0       	rjmp	.+70     	; 0x788 <GetKeypadKey+0x88>
 742:	8f e7       	ldi	r24, 0x7F	; 127
 744:	88 b9       	out	0x08, r24	; 8
 746:	00 00       	nop
 748:	30 9b       	sbis	0x06, 0	; 6
 74a:	20 c0       	rjmp	.+64     	; 0x78c <GetKeypadKey+0x8c>
 74c:	31 9b       	sbis	0x06, 1	; 6
 74e:	20 c0       	rjmp	.+64     	; 0x790 <GetKeypadKey+0x90>
 750:	32 9b       	sbis	0x06, 2	; 6
 752:	20 c0       	rjmp	.+64     	; 0x794 <GetKeypadKey+0x94>
 754:	33 9b       	sbis	0x06, 3	; 6
 756:	20 c0       	rjmp	.+64     	; 0x798 <GetKeypadKey+0x98>
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret
 75c:	81 e3       	ldi	r24, 0x31	; 49
 75e:	08 95       	ret
 760:	84 e3       	ldi	r24, 0x34	; 52
 762:	08 95       	ret
 764:	87 e3       	ldi	r24, 0x37	; 55
 766:	08 95       	ret
 768:	8a e2       	ldi	r24, 0x2A	; 42
 76a:	08 95       	ret
 76c:	82 e3       	ldi	r24, 0x32	; 50
 76e:	08 95       	ret
 770:	85 e3       	ldi	r24, 0x35	; 53
 772:	08 95       	ret
 774:	88 e3       	ldi	r24, 0x38	; 56
 776:	08 95       	ret
 778:	80 e3       	ldi	r24, 0x30	; 48
 77a:	08 95       	ret
 77c:	83 e3       	ldi	r24, 0x33	; 51
 77e:	08 95       	ret
 780:	86 e3       	ldi	r24, 0x36	; 54
 782:	08 95       	ret
 784:	89 e3       	ldi	r24, 0x39	; 57
 786:	08 95       	ret
 788:	83 e2       	ldi	r24, 0x23	; 35
 78a:	08 95       	ret
 78c:	81 e4       	ldi	r24, 0x41	; 65
 78e:	08 95       	ret
 790:	82 e4       	ldi	r24, 0x42	; 66
 792:	08 95       	ret
 794:	83 e4       	ldi	r24, 0x43	; 67
 796:	08 95       	ret
 798:	84 e4       	ldi	r24, 0x44	; 68
 79a:	08 95       	ret

0000079c <TickFct_Keypad>:
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	ec 01       	movw	r28, r24
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	91 05       	cpc	r25, r1
 7a6:	09 f4       	brne	.+2      	; 0x7aa <TickFct_Keypad+0xe>
 7a8:	47 c0       	rjmp	.+142    	; 0x838 <TickFct_Keypad+0x9c>
 7aa:	1c f4       	brge	.+6      	; 0x7b2 <TickFct_Keypad+0x16>
 7ac:	89 2b       	or	r24, r25
 7ae:	81 f1       	breq	.+96     	; 0x810 <TickFct_Keypad+0x74>
 7b0:	40 c0       	rjmp	.+128    	; 0x832 <TickFct_Keypad+0x96>
 7b2:	82 30       	cpi	r24, 0x02	; 2
 7b4:	91 05       	cpc	r25, r1
 7b6:	19 f0       	breq	.+6      	; 0x7be <TickFct_Keypad+0x22>
 7b8:	03 97       	sbiw	r24, 0x03	; 3
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <TickFct_Keypad+0x3c>
 7bc:	3a c0       	rjmp	.+116    	; 0x832 <TickFct_Keypad+0x96>
 7be:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <typing>
 7c2:	81 30       	cpi	r24, 0x01	; 1
 7c4:	d9 f5       	brne	.+118    	; 0x83c <TickFct_Keypad+0xa0>
 7c6:	9c df       	rcall	.-200    	; 0x700 <GetKeypadKey>
 7c8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tmp_key>
 7cc:	80 53       	subi	r24, 0x30	; 48
 7ce:	8a 30       	cpi	r24, 0x0A	; 10
 7d0:	a8 f5       	brcc	.+106    	; 0x83c <TickFct_Keypad+0xa0>
 7d2:	c3 e0       	ldi	r28, 0x03	; 3
 7d4:	d0 e0       	ldi	r29, 0x00	; 0
 7d6:	32 c0       	rjmp	.+100    	; 0x83c <TickFct_Keypad+0xa0>
 7d8:	93 df       	rcall	.-218    	; 0x700 <GetKeypadKey>
 7da:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <tmp_key>
 7de:	89 17       	cp	r24, r25
 7e0:	69 f1       	breq	.+90     	; 0x83c <TickFct_Keypad+0xa0>
 7e2:	ef e5       	ldi	r30, 0x5F	; 95
 7e4:	f1 e0       	ldi	r31, 0x01	; 1
 7e6:	01 90       	ld	r0, Z+
 7e8:	00 20       	and	r0, r0
 7ea:	e9 f7       	brne	.-6      	; 0x7e6 <TickFct_Keypad+0x4a>
 7ec:	31 97       	sbiw	r30, 0x01	; 1
 7ee:	ef 55       	subi	r30, 0x5F	; 95
 7f0:	f1 40       	sbci	r31, 0x01	; 1
 7f2:	e4 30       	cpi	r30, 0x04	; 4
 7f4:	f1 05       	cpc	r31, r1
 7f6:	38 f4       	brcc	.+14     	; 0x806 <TickFct_Keypad+0x6a>
 7f8:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <num>
 7fc:	ff 27       	eor	r31, r31
 7fe:	e1 5a       	subi	r30, 0xA1	; 161
 800:	fe 4f       	sbci	r31, 0xFE	; 254
 802:	90 83       	st	Z, r25
 804:	11 82       	std	Z+1, r1	; 0x01
 806:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <tmp_key>
 80a:	c2 e0       	ldi	r28, 0x02	; 2
 80c:	d0 e0       	ldi	r29, 0x00	; 0
 80e:	16 c0       	rjmp	.+44     	; 0x83c <TickFct_Keypad+0xa0>
 810:	ef e5       	ldi	r30, 0x5F	; 95
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	01 90       	ld	r0, Z+
 816:	00 20       	and	r0, r0
 818:	e9 f7       	brne	.-6      	; 0x814 <TickFct_Keypad+0x78>
 81a:	31 97       	sbiw	r30, 0x01	; 1
 81c:	af 01       	movw	r20, r30
 81e:	4f 55       	subi	r20, 0x5F	; 95
 820:	51 40       	sbci	r21, 0x01	; 1
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	8f e5       	ldi	r24, 0x5F	; 95
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	2f d3       	rcall	.+1630   	; 0xe8a <memset>
 82c:	c1 e0       	ldi	r28, 0x01	; 1
 82e:	d0 e0       	ldi	r29, 0x00	; 0
 830:	05 c0       	rjmp	.+10     	; 0x83c <TickFct_Keypad+0xa0>
 832:	c0 e0       	ldi	r28, 0x00	; 0
 834:	d0 e0       	ldi	r29, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <TickFct_Keypad+0xa0>
 838:	c2 e0       	ldi	r28, 0x02	; 2
 83a:	d0 e0       	ldi	r29, 0x00	; 0
 83c:	ce 01       	movw	r24, r28
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <initUSART>:
 844:	81 30       	cpi	r24, 0x01	; 1
 846:	81 f0       	breq	.+32     	; 0x868 <initUSART+0x24>
 848:	e1 ec       	ldi	r30, 0xC1	; 193
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	88 61       	ori	r24, 0x18	; 24
 850:	80 83       	st	Z, r24
 852:	e2 ec       	ldi	r30, 0xC2	; 194
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	86 60       	ori	r24, 0x06	; 6
 85a:	80 83       	st	Z, r24
 85c:	83 e3       	ldi	r24, 0x33	; 51
 85e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 862:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 866:	08 95       	ret
 868:	e9 ec       	ldi	r30, 0xC9	; 201
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	88 61       	ori	r24, 0x18	; 24
 870:	80 83       	st	Z, r24
 872:	ea ec       	ldi	r30, 0xCA	; 202
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	86 60       	ori	r24, 0x06	; 6
 87a:	80 83       	st	Z, r24
 87c:	83 e3       	ldi	r24, 0x33	; 51
 87e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 882:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 886:	08 95       	ret

00000888 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 888:	81 30       	cpi	r24, 0x01	; 1
 88a:	29 f4       	brne	.+10     	; 0x896 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 88c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 890:	88 23       	and	r24, r24
 892:	74 f0       	brlt	.+28     	; 0x8b0 <USART_Flush+0x28>
 894:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 896:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 89a:	88 23       	and	r24, r24
 89c:	8c f4       	brge	.+34     	; 0x8c0 <USART_Flush+0x38>
 89e:	a6 ec       	ldi	r26, 0xC6	; 198
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e0 ec       	ldi	r30, 0xC0	; 192
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	8c 91       	ld	r24, X
 8a8:	80 81       	ld	r24, Z
 8aa:	88 23       	and	r24, r24
 8ac:	e4 f3       	brlt	.-8      	; 0x8a6 <USART_Flush+0x1e>
 8ae:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 8b0:	ae ec       	ldi	r26, 0xCE	; 206
 8b2:	b0 e0       	ldi	r27, 0x00	; 0
 8b4:	e8 ec       	ldi	r30, 0xC8	; 200
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	8c 91       	ld	r24, X
 8ba:	80 81       	ld	r24, Z
 8bc:	88 23       	and	r24, r24
 8be:	e4 f3       	brlt	.-8      	; 0x8b8 <USART_Flush+0x30>
 8c0:	08 95       	ret

000008c2 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 8c2:	61 30       	cpi	r22, 0x01	; 1
 8c4:	41 f0       	breq	.+16     	; 0x8d6 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 8c6:	e0 ec       	ldi	r30, 0xC0	; 192
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	90 81       	ld	r25, Z
 8cc:	95 ff       	sbrs	r25, 5
 8ce:	fd cf       	rjmp	.-6      	; 0x8ca <USART_Send+0x8>
		UDR0 = sendMe;
 8d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 8d4:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 8d6:	e8 ec       	ldi	r30, 0xC8	; 200
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	90 81       	ld	r25, Z
 8dc:	95 ff       	sbrs	r25, 5
 8de:	fd cf       	rjmp	.-6      	; 0x8da <USART_Send+0x18>
		UDR1 = sendMe;
 8e0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 8e4:	08 95       	ret

000008e6 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	41 f0       	breq	.+16     	; 0x8fa <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 8ea:	e0 ec       	ldi	r30, 0xC0	; 192
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	88 23       	and	r24, r24
 8f2:	ec f7       	brge	.-6      	; 0x8ee <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 8f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 8f8:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 8fa:	e8 ec       	ldi	r30, 0xC8	; 200
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	88 23       	and	r24, r24
 902:	ec f7       	brge	.-6      	; 0x8fe <USART_Receive+0x18>
		return UDR1;
 904:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 908:	08 95       	ret

0000090a <TickFct_USART>:
enum USART_States { USART_start, USART_init, USART_receiving, USART_sending };
int TickFct_USART(int state)
{
	static unsigned char rec_tmp = 0;
	static unsigned char sed_tmp = 0;
	switch(state) //Transitions
 90a:	81 30       	cpi	r24, 0x01	; 1
 90c:	91 05       	cpc	r25, r1
 90e:	11 f1       	breq	.+68     	; 0x954 <TickFct_USART+0x4a>
 910:	1c f4       	brge	.+6      	; 0x918 <TickFct_USART+0xe>
 912:	89 2b       	or	r24, r25
 914:	c1 f0       	breq	.+48     	; 0x946 <TickFct_USART+0x3c>
 916:	6f c0       	rjmp	.+222    	; 0x9f6 <TickFct_USART+0xec>
 918:	82 30       	cpi	r24, 0x02	; 2
 91a:	91 05       	cpc	r25, r1
 91c:	19 f0       	breq	.+6      	; 0x924 <TickFct_USART+0x1a>
 91e:	03 97       	sbiw	r24, 0x03	; 3
 920:	c9 f0       	breq	.+50     	; 0x954 <TickFct_USART+0x4a>
 922:	69 c0       	rjmp	.+210    	; 0x9f6 <TickFct_USART+0xec>
		case USART_init:
			state = USART_receiving;
		break;
		
		case USART_receiving:
			if (Coin_1_D > 0 || Coin_5_D > 0 || Coin_10_D > 0 || Coin_25_D > 0)
 924:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Coin_1_D>
 928:	81 11       	cpse	r24, r1
 92a:	79 c0       	rjmp	.+242    	; 0xa1e <TickFct_USART+0x114>
 92c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <Coin_5_D>
 930:	81 11       	cpse	r24, r1
 932:	81 c0       	rjmp	.+258    	; 0xa36 <TickFct_USART+0x12c>
 934:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Coin_10_D>
 938:	81 11       	cpse	r24, r1
 93a:	7d c0       	rjmp	.+250    	; 0xa36 <TickFct_USART+0x12c>
 93c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Coin_25_D>
 940:	81 11       	cpse	r24, r1
 942:	79 c0       	rjmp	.+242    	; 0xa36 <TickFct_USART+0x12c>
 944:	07 c0       	rjmp	.+14     	; 0x954 <TickFct_USART+0x4a>
		break;
	}
	switch(state) //Actions
	{
		case USART_init:
			initUSART(0);
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	7d df       	rcall	.-262    	; 0x844 <initUSART>
			USART_Flush(0);
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	9d df       	rcall	.-198    	; 0x888 <USART_Flush>
		break;
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 954:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		
		case USART_receiving:
			if(USART_HasReceived(0))
 958:	88 23       	and	r24, r24
 95a:	0c f0       	brlt	.+2      	; 0x95e <TickFct_USART+0x54>
			{
				rec_tmp = USART_Receive(0);
 95c:	4f c0       	rjmp	.+158    	; 0x9fc <TickFct_USART+0xf2>
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	c2 df       	rcall	.-124    	; 0x8e6 <USART_Receive>
				if (rec_tmp == 0x01)
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	41 f4       	brne	.+16     	; 0x976 <TickFct_USART+0x6c>
				{
					Coin_1++;
 966:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Coin_1>
 96a:	8f 5f       	subi	r24, 0xFF	; 255
 96c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Coin_1>
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	08 95       	ret
				}
				else if (rec_tmp == 0x11)
 976:	81 31       	cpi	r24, 0x11	; 17
 978:	41 f4       	brne	.+16     	; 0x98a <TickFct_USART+0x80>
				{
					Coin_5++;
 97a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Coin_5>
 97e:	8f 5f       	subi	r24, 0xFF	; 255
 980:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Coin_5>
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	08 95       	ret
				}
				else if (rec_tmp == 0x21)
 98a:	81 32       	cpi	r24, 0x21	; 33
 98c:	41 f4       	brne	.+16     	; 0x99e <TickFct_USART+0x94>
				{
					Coin_10++;
 98e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Coin_10>
 992:	8f 5f       	subi	r24, 0xFF	; 255
 994:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Coin_10>
 998:	82 e0       	ldi	r24, 0x02	; 2
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	08 95       	ret
				}
				else if (rec_tmp == 0x31)
 99e:	81 33       	cpi	r24, 0x31	; 49
 9a0:	81 f5       	brne	.+96     	; 0xa02 <TickFct_USART+0xf8>
				{
					Coin_25++;
 9a2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Coin_25>
 9a6:	8f 5f       	subi	r24, 0xFF	; 255
 9a8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <Coin_25>
 9ac:	82 e0       	ldi	r24, 0x02	; 2
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	08 95       	ret
					USART_Send(sed_tmp, 0);
				}
				else if (Coin_5_D > 0)
				{
					sed_tmp = (0x3F & Coin_5_D) | 0x40;
					Coin_5_D = 0;
 9b2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <Coin_5_D>
					USART_Send(sed_tmp, 0);
 9b6:	8f 73       	andi	r24, 0x3F	; 63
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	80 64       	ori	r24, 0x40	; 64
 9bc:	82 df       	rcall	.-252    	; 0x8c2 <USART_Send>
 9be:	83 e0       	ldi	r24, 0x03	; 3
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	08 95       	ret
				}
				else if (Coin_10_D > 0)
 9c4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Coin_10_D>
 9c8:	88 23       	and	r24, r24
 9ca:	49 f0       	breq	.+18     	; 0x9de <TickFct_USART+0xd4>
				{
					sed_tmp = (0x3F & Coin_10_D) | 0x80;
					Coin_10_D = 0;
 9cc:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <Coin_10_D>
					USART_Send(sed_tmp, 0);
 9d0:	8f 73       	andi	r24, 0x3F	; 63
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	80 68       	ori	r24, 0x80	; 128
 9d6:	75 df       	rcall	.-278    	; 0x8c2 <USART_Send>
 9d8:	83 e0       	ldi	r24, 0x03	; 3
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	08 95       	ret
				}
				else if (Coin_25_D > 0)
 9de:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Coin_25_D>
 9e2:	88 23       	and	r24, r24
				{
					sed_tmp = (0x3F & Coin_25_D) | 0xC0;
					Coin_25_D = 0;
 9e4:	89 f0       	breq	.+34     	; 0xa08 <TickFct_USART+0xfe>
 9e6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <Coin_25_D>
					USART_Send(sed_tmp, 0);
 9ea:	60 e0       	ldi	r22, 0x00	; 0
 9ec:	80 6c       	ori	r24, 0xC0	; 192
 9ee:	69 df       	rcall	.-302    	; 0x8c2 <USART_Send>
 9f0:	83 e0       	ldi	r24, 0x03	; 3
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	08 95       	ret
				}
			}
		break;
		
		default:
			state = USART_start;
 9f6:	80 e0       	ldi	r24, 0x00	; 0
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	08 95       	ret
 9fc:	82 e0       	ldi	r24, 0x02	; 2
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	08 95       	ret
 a02:	82 e0       	ldi	r24, 0x02	; 2
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	08 95       	ret
 a08:	83 e0       	ldi	r24, 0x03	; 3
 a0a:	90 e0       	ldi	r25, 0x00	; 0
			if (USART_IsSendReady(0))
			{
				if (Coin_1_D > 0)
				{
					sed_tmp = (0x3F & Coin_1_D) | 0x00;
					Coin_1_D = 0;
 a0c:	08 95       	ret
 a0e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <Coin_1_D>
					USART_Send(sed_tmp, 0);
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	8f 73       	andi	r24, 0x3F	; 63
 a16:	55 df       	rcall	.-342    	; 0x8c2 <USART_Send>
 a18:	83 e0       	ldi	r24, 0x03	; 3
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	08 95       	ret
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 a1e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				}
			}
		break;
		
		case USART_sending:
			if (USART_IsSendReady(0))
 a22:	95 fd       	sbrc	r25, 5
 a24:	f4 cf       	rjmp	.-24     	; 0xa0e <TickFct_USART+0x104>
 a26:	83 e0       	ldi	r24, 0x03	; 3
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	08 95       	ret
				{
					sed_tmp = (0x3F & Coin_1_D) | 0x00;
					Coin_1_D = 0;
					USART_Send(sed_tmp, 0);
				}
				else if (Coin_5_D > 0)
 a2c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <Coin_5_D>
 a30:	88 23       	and	r24, r24
 a32:	41 f2       	breq	.-112    	; 0x9c4 <TickFct_USART+0xba>
 a34:	be cf       	rjmp	.-132    	; 0x9b2 <TickFct_USART+0xa8>
 a36:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				}
			}
		break;
		
		case USART_sending:
			if (USART_IsSendReady(0))
 a3a:	85 fd       	sbrc	r24, 5
 a3c:	f7 cf       	rjmp	.-18     	; 0xa2c <TickFct_USART+0x122>
 a3e:	83 e0       	ldi	r24, 0x03	; 3
 a40:	90 e0       	ldi	r25, 0x00	; 0
		default:
			state = USART_start;
		break;
	}
	return state;
}
 a42:	08 95       	ret

00000a44 <DispenseDecision>:
char Show_Dispense[17] = "Dispense Change:";
char Show_Dispensing[14] = "   Dispensing";
char No_Coins[17] = "No Enough Coins!";

unsigned char DispenseDecision() // 1 Dispensing, 2 Not Enough
{
 a44:	1f 93       	push	r17
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
	int INPUT = atoi(input) * 100;
 a4a:	8f e5       	ldi	r24, 0x5F	; 95
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	00 d2       	rcall	.+1024   	; 0xe50 <atoi>
 a50:	24 e6       	ldi	r18, 0x64	; 100
 a52:	ac 01       	movw	r20, r24
 a54:	24 9f       	mul	r18, r20
 a56:	c0 01       	movw	r24, r0
 a58:	25 9f       	mul	r18, r21
 a5a:	90 0d       	add	r25, r0
 a5c:	11 24       	eor	r1, r1
	if ((Coin_1*1+Coin_5*5+Coin_10*10+Coin_25*25) < INPUT)
 a5e:	d0 91 57 01 	lds	r29, 0x0157	; 0x800157 <Coin_1>
 a62:	ad 2f       	mov	r26, r29
 a64:	b0 e0       	ldi	r27, 0x00	; 0
 a66:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Coin_5>
 a6a:	6e 2f       	mov	r22, r30
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	9b 01       	movw	r18, r22
 a70:	22 0f       	add	r18, r18
 a72:	33 1f       	adc	r19, r19
 a74:	22 0f       	add	r18, r18
 a76:	33 1f       	adc	r19, r19
 a78:	62 0f       	add	r22, r18
 a7a:	73 1f       	adc	r23, r19
 a7c:	6a 0f       	add	r22, r26
 a7e:	7b 1f       	adc	r23, r27
 a80:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Coin_10>
 a84:	4f 2f       	mov	r20, r31
 a86:	50 e0       	ldi	r21, 0x00	; 0
 a88:	9a 01       	movw	r18, r20
 a8a:	22 0f       	add	r18, r18
 a8c:	33 1f       	adc	r19, r19
 a8e:	44 0f       	add	r20, r20
 a90:	55 1f       	adc	r21, r21
 a92:	44 0f       	add	r20, r20
 a94:	55 1f       	adc	r21, r21
 a96:	44 0f       	add	r20, r20
 a98:	55 1f       	adc	r21, r21
 a9a:	24 0f       	add	r18, r20
 a9c:	35 1f       	adc	r19, r21
 a9e:	26 0f       	add	r18, r22
 aa0:	37 1f       	adc	r19, r23
 aa2:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <Coin_25>
 aa6:	a9 01       	movw	r20, r18
 aa8:	19 e1       	ldi	r17, 0x19	; 25
 aaa:	c1 9f       	mul	r28, r17
 aac:	40 0d       	add	r20, r0
 aae:	51 1d       	adc	r21, r1
 ab0:	11 24       	eor	r1, r1
 ab2:	48 17       	cp	r20, r24
 ab4:	59 07       	cpc	r21, r25
 ab6:	0c f4       	brge	.+2      	; 0xaba <DispenseDecision+0x76>
 ab8:	4e c0       	rjmp	.+156    	; 0xb56 <DispenseDecision+0x112>
 aba:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <Coin_25_D>
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <DispenseDecision+0x80>
	else
	{
		while ((INPUT >= 25 && Coin_25 > Coin_25_D) || ((Coin_1*1+Coin_5*5+Coin_10*10) < INPUT))
		{
			Coin_25_D++;
			INPUT = INPUT - 25;
 ac0:	49 97       	sbiw	r24, 0x19	; 25
 ac2:	4f 5f       	subi	r20, 0xFF	; 255
	{
		return 2;
	} 
	else
	{
		while ((INPUT >= 25 && Coin_25 > Coin_25_D) || ((Coin_1*1+Coin_5*5+Coin_10*10) < INPUT))
 ac4:	89 31       	cpi	r24, 0x19	; 25
 ac6:	91 05       	cpc	r25, r1
 ac8:	14 f0       	brlt	.+4      	; 0xace <DispenseDecision+0x8a>
 aca:	4c 17       	cp	r20, r28
 acc:	c8 f3       	brcs	.-14     	; 0xac0 <DispenseDecision+0x7c>
 ace:	28 17       	cp	r18, r24
 ad0:	39 07       	cpc	r19, r25
 ad2:	b4 f3       	brlt	.-20     	; 0xac0 <DispenseDecision+0x7c>
 ad4:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <Coin_25_D>
 ad8:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <Coin_10_D>
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <DispenseDecision+0x9e>
			INPUT = INPUT - 25;
		}
		while ((INPUT >= 10 && Coin_10 > Coin_10_D) || ((Coin_1*1+Coin_5*5) < INPUT))
		{
			Coin_10_D++;
			INPUT = INPUT - 10;
 ade:	0a 97       	sbiw	r24, 0x0a	; 10
 ae0:	3f 5f       	subi	r19, 0xFF	; 255
		while ((INPUT >= 25 && Coin_25 > Coin_25_D) || ((Coin_1*1+Coin_5*5+Coin_10*10) < INPUT))
		{
			Coin_25_D++;
			INPUT = INPUT - 25;
		}
		while ((INPUT >= 10 && Coin_10 > Coin_10_D) || ((Coin_1*1+Coin_5*5) < INPUT))
 ae2:	8a 30       	cpi	r24, 0x0A	; 10
 ae4:	91 05       	cpc	r25, r1
 ae6:	14 f0       	brlt	.+4      	; 0xaec <DispenseDecision+0xa8>
 ae8:	3f 17       	cp	r19, r31
 aea:	c8 f3       	brcs	.-14     	; 0xade <DispenseDecision+0x9a>
 aec:	68 17       	cp	r22, r24
 aee:	79 07       	cpc	r23, r25
 af0:	b4 f3       	brlt	.-20     	; 0xade <DispenseDecision+0x9a>
 af2:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <Coin_10_D>
 af6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <Coin_5_D>
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <DispenseDecision+0xbc>
			INPUT = INPUT - 10;
		}
		while ((INPUT >= 5 && Coin_5 > Coin_5_D) || ((Coin_1*1) < INPUT))
		{
			Coin_5_D++;
			INPUT = INPUT - 5;
 afc:	05 97       	sbiw	r24, 0x05	; 5
 afe:	2f 5f       	subi	r18, 0xFF	; 255
		while ((INPUT >= 10 && Coin_10 > Coin_10_D) || ((Coin_1*1+Coin_5*5) < INPUT))
		{
			Coin_10_D++;
			INPUT = INPUT - 10;
		}
		while ((INPUT >= 5 && Coin_5 > Coin_5_D) || ((Coin_1*1) < INPUT))
 b00:	85 30       	cpi	r24, 0x05	; 5
 b02:	91 05       	cpc	r25, r1
 b04:	14 f0       	brlt	.+4      	; 0xb0a <DispenseDecision+0xc6>
 b06:	2e 17       	cp	r18, r30
 b08:	c8 f3       	brcs	.-14     	; 0xafc <DispenseDecision+0xb8>
 b0a:	a8 17       	cp	r26, r24
 b0c:	b9 07       	cpc	r27, r25
 b0e:	b4 f3       	brlt	.-20     	; 0xafc <DispenseDecision+0xb8>
 b10:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <Coin_5_D>
		{
			Coin_5_D++;
			INPUT = INPUT - 5;
		}
		while (INPUT >= 1 && Coin_1 > Coin_1_D)
 b14:	18 16       	cp	r1, r24
 b16:	19 06       	cpc	r1, r25
 b18:	74 f4       	brge	.+28     	; 0xb36 <DispenseDecision+0xf2>
 b1a:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <Coin_1_D>
 b1e:	5d 17       	cp	r21, r29
 b20:	50 f4       	brcc	.+20     	; 0xb36 <DispenseDecision+0xf2>
		{
			Coin_1_D++;
 b22:	5f 5f       	subi	r21, 0xFF	; 255
			INPUT = INPUT - 1;
 b24:	01 97       	sbiw	r24, 0x01	; 1
		while ((INPUT >= 5 && Coin_5 > Coin_5_D) || ((Coin_1*1) < INPUT))
		{
			Coin_5_D++;
			INPUT = INPUT - 5;
		}
		while (INPUT >= 1 && Coin_1 > Coin_1_D)
 b26:	19 f4       	brne	.+6      	; 0xb2e <DispenseDecision+0xea>
 b28:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <Coin_1_D>
 b2c:	04 c0       	rjmp	.+8      	; 0xb36 <DispenseDecision+0xf2>
 b2e:	5d 17       	cp	r21, r29
 b30:	c0 f3       	brcs	.-16     	; 0xb22 <DispenseDecision+0xde>
 b32:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <Coin_1_D>
		{
			Coin_1_D++;
			INPUT = INPUT - 1;
		}
		Coin_25 = Coin_25 - Coin_25_D;
 b36:	c4 1b       	sub	r28, r20
 b38:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <Coin_25>
		Coin_10 = Coin_10 - Coin_10_D;
 b3c:	f3 1b       	sub	r31, r19
 b3e:	f0 93 55 01 	sts	0x0155, r31	; 0x800155 <Coin_10>
		Coin_5 = Coin_5 - Coin_5_D;
 b42:	e2 1b       	sub	r30, r18
 b44:	e0 93 56 01 	sts	0x0156, r30	; 0x800156 <Coin_5>
		Coin_1 = Coin_1 - Coin_1_D;
 b48:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Coin_1_D>
 b4c:	d8 1b       	sub	r29, r24
 b4e:	d0 93 57 01 	sts	0x0157, r29	; 0x800157 <Coin_1>
		return 1;
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	01 c0       	rjmp	.+2      	; 0xb58 <DispenseDecision+0x114>
unsigned char DispenseDecision() // 1 Dispensing, 2 Not Enough
{
	int INPUT = atoi(input) * 100;
	if ((Coin_1*1+Coin_5*5+Coin_10*10+Coin_25*25) < INPUT)
	{
		return 2;
 b56:	82 e0       	ldi	r24, 0x02	; 2
		Coin_5 = Coin_5 - Coin_5_D;
		Coin_1 = Coin_1 - Coin_1_D;
		return 1;
	}
	
}
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	1f 91       	pop	r17
 b5e:	08 95       	ret

00000b60 <TickFct_LCD>:
	}
	return state;
}

enum LCD_States { LCD_start, LCD_init, ShowCoins, ShowDispense, ShowDispensing, NoCoins };
int TickFct_LCD(int state) {
 b60:	cf 93       	push	r28
	switch(state) { // Transitions
 b62:	82 30       	cpi	r24, 0x02	; 2
 b64:	91 05       	cpc	r25, r1
 b66:	91 f0       	breq	.+36     	; 0xb8c <TickFct_LCD+0x2c>
 b68:	34 f4       	brge	.+12     	; 0xb76 <TickFct_LCD+0x16>
 b6a:	00 97       	sbiw	r24, 0x00	; 0
 b6c:	09 f4       	brne	.+2      	; 0xb70 <TickFct_LCD+0x10>
 b6e:	73 c0       	rjmp	.+230    	; 0xc56 <TickFct_LCD+0xf6>
 b70:	01 97       	sbiw	r24, 0x01	; 1
 b72:	51 f0       	breq	.+20     	; 0xb88 <TickFct_LCD+0x28>
 b74:	74 c0       	rjmp	.+232    	; 0xc5e <TickFct_LCD+0xfe>
 b76:	84 30       	cpi	r24, 0x04	; 4
 b78:	91 05       	cpc	r25, r1
 b7a:	09 f4       	brne	.+2      	; 0xb7e <TickFct_LCD+0x1e>
 b7c:	55 c0       	rjmp	.+170    	; 0xc28 <TickFct_LCD+0xc8>
 b7e:	7c f0       	brlt	.+30     	; 0xb9e <TickFct_LCD+0x3e>
 b80:	05 97       	sbiw	r24, 0x05	; 5
 b82:	09 f4       	brne	.+2      	; 0xb86 <TickFct_LCD+0x26>
 b84:	5b c0       	rjmp	.+182    	; 0xc3c <TickFct_LCD+0xdc>
 b86:	6b c0       	rjmp	.+214    	; 0xc5e <TickFct_LCD+0xfe>
		case LCD_start: // Initial transition
			state = LCD_init;
		break;
		
		case LCD_init:
			Lcd8_Clear();
 b88:	58 dd       	rcall	.-1360   	; 0x63a <Lcd8_Clear>
			state = ShowCoins;
		break;
		
		case ShowCoins:
			if (GetKeypadKey() == 'A') //Back
 b8a:	6c c0       	rjmp	.+216    	; 0xc64 <TickFct_LCD+0x104>
 b8c:	b9 dd       	rcall	.-1166   	; 0x700 <GetKeypadKey>
 b8e:	81 34       	cpi	r24, 0x41	; 65
 b90:	09 f0       	breq	.+2      	; 0xb94 <TickFct_LCD+0x34>
			{
				Lcd8_Clear();
 b92:	68 c0       	rjmp	.+208    	; 0xc64 <TickFct_LCD+0x104>
 b94:	52 dd       	rcall	.-1372   	; 0x63a <Lcd8_Clear>
				typing = 1;
 b96:	81 e0       	ldi	r24, 0x01	; 1
 b98:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <typing>
				state = ShowCoins;
			}
		break;
		
		case ShowDispense:
			if (GetKeypadKey() == 'B') //Enter
 b9c:	e9 c0       	rjmp	.+466    	; 0xd70 <TickFct_LCD+0x210>
 b9e:	b0 dd       	rcall	.-1184   	; 0x700 <GetKeypadKey>
 ba0:	82 34       	cpi	r24, 0x42	; 66
			{
				if (DispenseDecision() == 1) //Dispensing
 ba2:	71 f5       	brne	.+92     	; 0xc00 <TickFct_LCD+0xa0>
 ba4:	4f df       	rcall	.-354    	; 0xa44 <DispenseDecision>
 ba6:	81 30       	cpi	r24, 0x01	; 1
 ba8:	b9 f4       	brne	.+46     	; 0xbd8 <TickFct_LCD+0x78>
				{
					memset(input, 0, strlen(input));
 baa:	ef e5       	ldi	r30, 0x5F	; 95
 bac:	f1 e0       	ldi	r31, 0x01	; 1
 bae:	01 90       	ld	r0, Z+
 bb0:	00 20       	and	r0, r0
 bb2:	e9 f7       	brne	.-6      	; 0xbae <TickFct_LCD+0x4e>
 bb4:	31 97       	sbiw	r30, 0x01	; 1
 bb6:	af 01       	movw	r20, r30
 bb8:	4f 55       	subi	r20, 0x5F	; 95
 bba:	51 40       	sbci	r21, 0x01	; 1
 bbc:	60 e0       	ldi	r22, 0x00	; 0
 bbe:	70 e0       	ldi	r23, 0x00	; 0
 bc0:	8f e5       	ldi	r24, 0x5F	; 95
 bc2:	91 e0       	ldi	r25, 0x01	; 1
					cnt = 0;
 bc4:	62 d1       	rcall	.+708    	; 0xe8a <memset>
 bc6:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <cnt>
					Lcd8_Clear();
 bca:	37 dd       	rcall	.-1426   	; 0x63a <Lcd8_Clear>
					typing = 0;
 bcc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <typing>
					dispensing = 1;
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <dispensing>
 bd6:	dd c0       	rjmp	.+442    	; 0xd92 <TickFct_LCD+0x232>
					state = ShowDispensing;
				} 
				else //Not enough
				{
					memset(input, 0, strlen(input));
 bd8:	ef e5       	ldi	r30, 0x5F	; 95
 bda:	f1 e0       	ldi	r31, 0x01	; 1
 bdc:	01 90       	ld	r0, Z+
 bde:	00 20       	and	r0, r0
 be0:	e9 f7       	brne	.-6      	; 0xbdc <TickFct_LCD+0x7c>
 be2:	31 97       	sbiw	r30, 0x01	; 1
 be4:	af 01       	movw	r20, r30
 be6:	4f 55       	subi	r20, 0x5F	; 95
 be8:	51 40       	sbci	r21, 0x01	; 1
 bea:	60 e0       	ldi	r22, 0x00	; 0
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	8f e5       	ldi	r24, 0x5F	; 95
 bf0:	91 e0       	ldi	r25, 0x01	; 1
					cnt = 0;
 bf2:	4b d1       	rcall	.+662    	; 0xe8a <memset>
 bf4:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <cnt>
					Lcd8_Clear();
 bf8:	20 dd       	rcall	.-1472   	; 0x63a <Lcd8_Clear>
					typing = 0;
 bfa:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <typing>
 bfe:	d1 c0       	rjmp	.+418    	; 0xda2 <TickFct_LCD+0x242>
					state = NoCoins;
				}
			} 
			else if (GetKeypadKey() == 'C') //Back
 c00:	7f dd       	rcall	.-1282   	; 0x700 <GetKeypadKey>
 c02:	83 34       	cpi	r24, 0x43	; 67
 c04:	09 f0       	breq	.+2      	; 0xc08 <TickFct_LCD+0xa8>
 c06:	b4 c0       	rjmp	.+360    	; 0xd70 <TickFct_LCD+0x210>
 c08:	ef e5       	ldi	r30, 0x5F	; 95
			{
				memset(input, 0, strlen(input));
 c0a:	f1 e0       	ldi	r31, 0x01	; 1
 c0c:	01 90       	ld	r0, Z+
 c0e:	00 20       	and	r0, r0
 c10:	e9 f7       	brne	.-6      	; 0xc0c <TickFct_LCD+0xac>
 c12:	31 97       	sbiw	r30, 0x01	; 1
 c14:	af 01       	movw	r20, r30
 c16:	4f 55       	subi	r20, 0x5F	; 95
 c18:	51 40       	sbci	r21, 0x01	; 1
 c1a:	60 e0       	ldi	r22, 0x00	; 0
 c1c:	70 e0       	ldi	r23, 0x00	; 0
 c1e:	8f e5       	ldi	r24, 0x5F	; 95
 c20:	91 e0       	ldi	r25, 0x01	; 1
 c22:	33 d1       	rcall	.+614    	; 0xe8a <memset>
				Lcd8_Clear();
 c24:	0a dd       	rcall	.-1516   	; 0x63a <Lcd8_Clear>
 c26:	1e c0       	rjmp	.+60     	; 0xc64 <TickFct_LCD+0x104>
 c28:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cnt>
				state = ShowDispense;
			}
		break;
		
		case ShowDispensing:
			if (cnt < WAITTIME)
 c2c:	8c 33       	cpi	r24, 0x3C	; 60
 c2e:	20 f4       	brcc	.+8      	; 0xc38 <TickFct_LCD+0xd8>
 c30:	8f 5f       	subi	r24, 0xFF	; 255
			{
				cnt++;
 c32:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cnt>
 c36:	ad c0       	rjmp	.+346    	; 0xd92 <TickFct_LCD+0x232>
				state = ShowDispensing;
			} 
			else
			{
				Lcd8_Clear();
 c38:	00 dd       	rcall	.-1536   	; 0x63a <Lcd8_Clear>
 c3a:	14 c0       	rjmp	.+40     	; 0xc64 <TickFct_LCD+0x104>
 c3c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cnt>
				state = ShowCoins;
			}
		break;
		
		case NoCoins:
			if (cnt < WAITTIME)
 c40:	8c 33       	cpi	r24, 0x3C	; 60
 c42:	20 f4       	brcc	.+8      	; 0xc4c <TickFct_LCD+0xec>
			{
				cnt++;
 c44:	8f 5f       	subi	r24, 0xFF	; 255
 c46:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cnt>
 c4a:	ab c0       	rjmp	.+342    	; 0xda2 <TickFct_LCD+0x242>
				state = NoCoins;
			}
			else
			{
				Lcd8_Clear();
 c4c:	f6 dc       	rcall	.-1556   	; 0x63a <Lcd8_Clear>
				typing = 1;
 c4e:	81 e0       	ldi	r24, 0x01	; 1
 c50:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <typing>
		break;
	}

	switch(state) { // State actions
		case LCD_init:
			Lcd8_Init();
 c54:	8d c0       	rjmp	.+282    	; 0xd70 <TickFct_LCD+0x210>
 c56:	f4 dc       	rcall	.-1560   	; 0x640 <Lcd8_Init>
		break;
 c58:	81 e0       	ldi	r24, 0x01	; 1
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	a9 c0       	rjmp	.+338    	; 0xdb0 <TickFct_LCD+0x250>
			Lcd8_Set_Cursor(1,0);
			Lcd8_Write_String(No_Coins);
		break;
		
		default:
		state = LCD_start;
 c5e:	80 e0       	ldi	r24, 0x00	; 0
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	a6 c0       	rjmp	.+332    	; 0xdb0 <TickFct_LCD+0x250>
}

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
 c64:	80 e8       	ldi	r24, 0x80	; 128
 c66:	c8 dc       	rcall	.-1648   	; 0x5f8 <Lcd8_Cmd>
		break;
		
		case ShowCoins:
			//ROW1
			Lcd8_Set_Cursor(1,0);
			Lcd8_Write_String(Show_Coins_R1);
 c68:	8b e3       	ldi	r24, 0x3B	; 59
 c6a:	91 e0       	ldi	r25, 0x01	; 1
 c6c:	3b dd       	rcall	.-1418   	; 0x6e4 <Lcd8_Write_String>
 c6e:	83 e8       	ldi	r24, 0x83	; 131
 c70:	c3 dc       	rcall	.-1658   	; 0x5f8 <Lcd8_Cmd>
 c72:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Coin_1>
			Lcd8_Set_Cursor(1,3);
			Lcd8_Write_Char((Coin_1/10)+'0');
 c76:	cd ec       	ldi	r28, 0xCD	; 205
 c78:	8c 9f       	mul	r24, r28
 c7a:	81 2d       	mov	r24, r1
 c7c:	11 24       	eor	r1, r1
 c7e:	86 95       	lsr	r24
 c80:	86 95       	lsr	r24
 c82:	86 95       	lsr	r24
 c84:	80 5d       	subi	r24, 0xD0	; 208
 c86:	0d dd       	rcall	.-1510   	; 0x6a2 <Lcd8_Write_Char>
 c88:	84 e8       	ldi	r24, 0x84	; 132
 c8a:	b6 dc       	rcall	.-1684   	; 0x5f8 <Lcd8_Cmd>
 c8c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Coin_1>
			Lcd8_Set_Cursor(1,4);
			Lcd8_Write_Char((Coin_1%10)+'0');
 c90:	8c 9f       	mul	r24, r28
 c92:	91 2d       	mov	r25, r1
 c94:	11 24       	eor	r1, r1
 c96:	96 95       	lsr	r25
 c98:	96 95       	lsr	r25
 c9a:	96 95       	lsr	r25
 c9c:	99 0f       	add	r25, r25
 c9e:	29 2f       	mov	r18, r25
 ca0:	22 0f       	add	r18, r18
 ca2:	22 0f       	add	r18, r18
 ca4:	92 0f       	add	r25, r18
 ca6:	89 1b       	sub	r24, r25
 ca8:	80 5d       	subi	r24, 0xD0	; 208
 caa:	fb dc       	rcall	.-1546   	; 0x6a2 <Lcd8_Write_Char>
 cac:	8a e8       	ldi	r24, 0x8A	; 138
 cae:	a4 dc       	rcall	.-1720   	; 0x5f8 <Lcd8_Cmd>
 cb0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Coin_10>
			Lcd8_Set_Cursor(1,10);
			Lcd8_Write_Char((Coin_10/10)+'0');
 cb4:	8c 9f       	mul	r24, r28
 cb6:	81 2d       	mov	r24, r1
 cb8:	11 24       	eor	r1, r1
 cba:	86 95       	lsr	r24
 cbc:	86 95       	lsr	r24
 cbe:	86 95       	lsr	r24
 cc0:	80 5d       	subi	r24, 0xD0	; 208
 cc2:	ef dc       	rcall	.-1570   	; 0x6a2 <Lcd8_Write_Char>
 cc4:	8b e8       	ldi	r24, 0x8B	; 139
 cc6:	98 dc       	rcall	.-1744   	; 0x5f8 <Lcd8_Cmd>
			Lcd8_Set_Cursor(1,11);
			Lcd8_Write_Char((Coin_10%10)+'0');
 cc8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Coin_10>
 ccc:	8c 9f       	mul	r24, r28
 cce:	91 2d       	mov	r25, r1
 cd0:	11 24       	eor	r1, r1
 cd2:	96 95       	lsr	r25
 cd4:	96 95       	lsr	r25
 cd6:	96 95       	lsr	r25
 cd8:	99 0f       	add	r25, r25
 cda:	29 2f       	mov	r18, r25
 cdc:	22 0f       	add	r18, r18
 cde:	22 0f       	add	r18, r18
 ce0:	92 0f       	add	r25, r18
 ce2:	89 1b       	sub	r24, r25
 ce4:	80 5d       	subi	r24, 0xD0	; 208
	else if(a == 2)
	Lcd8_Cmd(0xC0 + b);
 ce6:	dd dc       	rcall	.-1606   	; 0x6a2 <Lcd8_Write_Char>
 ce8:	80 ec       	ldi	r24, 0xC0	; 192
 cea:	86 dc       	rcall	.-1780   	; 0x5f8 <Lcd8_Cmd>
			
			//ROW2
			Lcd8_Set_Cursor(2,0);
			Lcd8_Write_String(Show_Coins_R2);
 cec:	80 e3       	ldi	r24, 0x30	; 48
 cee:	91 e0       	ldi	r25, 0x01	; 1
 cf0:	f9 dc       	rcall	.-1550   	; 0x6e4 <Lcd8_Write_String>
 cf2:	83 ec       	ldi	r24, 0xC3	; 195
 cf4:	81 dc       	rcall	.-1790   	; 0x5f8 <Lcd8_Cmd>
 cf6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Coin_5>
			Lcd8_Set_Cursor(2,3);
			Lcd8_Write_Char((Coin_5/10)+'0');
 cfa:	8c 9f       	mul	r24, r28
 cfc:	81 2d       	mov	r24, r1
 cfe:	11 24       	eor	r1, r1
 d00:	86 95       	lsr	r24
 d02:	86 95       	lsr	r24
 d04:	86 95       	lsr	r24
 d06:	80 5d       	subi	r24, 0xD0	; 208
 d08:	cc dc       	rcall	.-1640   	; 0x6a2 <Lcd8_Write_Char>
 d0a:	84 ec       	ldi	r24, 0xC4	; 196
 d0c:	75 dc       	rcall	.-1814   	; 0x5f8 <Lcd8_Cmd>
 d0e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Coin_5>
			Lcd8_Set_Cursor(2,4);
			Lcd8_Write_Char((Coin_5%10)+'0');
 d12:	8c 9f       	mul	r24, r28
 d14:	91 2d       	mov	r25, r1
 d16:	11 24       	eor	r1, r1
 d18:	96 95       	lsr	r25
 d1a:	96 95       	lsr	r25
 d1c:	96 95       	lsr	r25
 d1e:	99 0f       	add	r25, r25
 d20:	29 2f       	mov	r18, r25
 d22:	22 0f       	add	r18, r18
 d24:	22 0f       	add	r18, r18
 d26:	92 0f       	add	r25, r18
 d28:	89 1b       	sub	r24, r25
 d2a:	80 5d       	subi	r24, 0xD0	; 208
 d2c:	ba dc       	rcall	.-1676   	; 0x6a2 <Lcd8_Write_Char>
 d2e:	8a ec       	ldi	r24, 0xCA	; 202
 d30:	63 dc       	rcall	.-1850   	; 0x5f8 <Lcd8_Cmd>
 d32:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Coin_25>
			Lcd8_Set_Cursor(2,10);
			Lcd8_Write_Char((Coin_25/10)+'0');
 d36:	8c 9f       	mul	r24, r28
 d38:	81 2d       	mov	r24, r1
 d3a:	11 24       	eor	r1, r1
 d3c:	86 95       	lsr	r24
 d3e:	86 95       	lsr	r24
 d40:	86 95       	lsr	r24
 d42:	80 5d       	subi	r24, 0xD0	; 208
 d44:	ae dc       	rcall	.-1700   	; 0x6a2 <Lcd8_Write_Char>
 d46:	8b ec       	ldi	r24, 0xCB	; 203
			Lcd8_Set_Cursor(2,11);
			Lcd8_Write_Char((Coin_25%10)+'0');
 d48:	57 dc       	rcall	.-1874   	; 0x5f8 <Lcd8_Cmd>
 d4a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Coin_25>
 d4e:	8c 9f       	mul	r24, r28
 d50:	c1 2d       	mov	r28, r1
 d52:	11 24       	eor	r1, r1
 d54:	c6 95       	lsr	r28
 d56:	c6 95       	lsr	r28
 d58:	c6 95       	lsr	r28
 d5a:	cc 0f       	add	r28, r28
 d5c:	9c 2f       	mov	r25, r28
 d5e:	99 0f       	add	r25, r25
 d60:	99 0f       	add	r25, r25
 d62:	c9 0f       	add	r28, r25
		break;
 d64:	8c 1b       	sub	r24, r28
 d66:	80 5d       	subi	r24, 0xD0	; 208
 d68:	9c dc       	rcall	.-1736   	; 0x6a2 <Lcd8_Write_Char>
}

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
 d6a:	82 e0       	ldi	r24, 0x02	; 2
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	20 c0       	rjmp	.+64     	; 0xdb0 <TickFct_LCD+0x250>
		
		case ShowDispense:
			Lcd8_Set_Cursor(1,0);
			Lcd8_Write_String(Show_Dispense);
 d70:	80 e8       	ldi	r24, 0x80	; 128
 d72:	42 dc       	rcall	.-1916   	; 0x5f8 <Lcd8_Cmd>
 d74:	8f e1       	ldi	r24, 0x1F	; 31
 d76:	91 e0       	ldi	r25, 0x01	; 1
	else if(a == 2)
	Lcd8_Cmd(0xC0 + b);
 d78:	b5 dc       	rcall	.-1686   	; 0x6e4 <Lcd8_Write_String>
 d7a:	80 ec       	ldi	r24, 0xC0	; 192
 d7c:	3d dc       	rcall	.-1926   	; 0x5f8 <Lcd8_Cmd>
			Lcd8_Set_Cursor(2,0);
			Lcd8_Write_Char('$');
 d7e:	84 e2       	ldi	r24, 0x24	; 36
 d80:	90 dc       	rcall	.-1760   	; 0x6a2 <Lcd8_Write_Char>
 d82:	81 ec       	ldi	r24, 0xC1	; 193
 d84:	39 dc       	rcall	.-1934   	; 0x5f8 <Lcd8_Cmd>
 d86:	8f e5       	ldi	r24, 0x5F	; 95
 d88:	91 e0       	ldi	r25, 0x01	; 1
			Lcd8_Set_Cursor(2,1);
			Lcd8_Write_String(input);
 d8a:	ac dc       	rcall	.-1704   	; 0x6e4 <Lcd8_Write_String>
 d8c:	83 e0       	ldi	r24, 0x03	; 3
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	0f c0       	rjmp	.+30     	; 0xdb0 <TickFct_LCD+0x250>
		break;
 d92:	80 e8       	ldi	r24, 0x80	; 128
 d94:	31 dc       	rcall	.-1950   	; 0x5f8 <Lcd8_Cmd>
 d96:	81 e1       	ldi	r24, 0x11	; 17
}

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
 d98:	91 e0       	ldi	r25, 0x01	; 1
 d9a:	a4 dc       	rcall	.-1720   	; 0x6e4 <Lcd8_Write_String>
 d9c:	84 e0       	ldi	r24, 0x04	; 4
		
		case ShowDispensing:
			Lcd8_Set_Cursor(1,0);
			Lcd8_Write_String(Show_Dispensing);
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	07 c0       	rjmp	.+14     	; 0xdb0 <TickFct_LCD+0x250>
 da2:	80 e8       	ldi	r24, 0x80	; 128
 da4:	29 dc       	rcall	.-1966   	; 0x5f8 <Lcd8_Cmd>
		break;
 da6:	80 e0       	ldi	r24, 0x00	; 0
 da8:	91 e0       	ldi	r25, 0x01	; 1
 daa:	9c dc       	rcall	.-1736   	; 0x6e4 <Lcd8_Write_String>
 dac:	85 e0       	ldi	r24, 0x05	; 5
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	cf 91       	pop	r28
		
		case NoCoins:
			Lcd8_Set_Cursor(1,0);
			Lcd8_Write_String(No_Coins);
 db2:	08 95       	ret

00000db4 <main>:
 db4:	cf 93       	push	r28
 db6:	df 93       	push	r29
 db8:	cd b7       	in	r28, 0x3d	; 61
		break;
 dba:	de b7       	in	r29, 0x3e	; 62
 dbc:	a1 97       	sbiw	r28, 0x21	; 33
		state = LCD_start;
		break;
	}
	
	return state;
}
 dbe:	0f b6       	in	r0, 0x3f	; 63
 dc0:	f8 94       	cli

int main(void)
{
 dc2:	de bf       	out	0x3e, r29	; 62
 dc4:	0f be       	out	0x3f, r0	; 63
 dc6:	cd bf       	out	0x3d, r28	; 61
    // initialize ports
    DDRA = 0xFF; PORTA = 0x00;
 dc8:	8f ef       	ldi	r24, 0xFF	; 255
 dca:	81 b9       	out	0x01, r24	; 1
 dcc:	12 b8       	out	0x02, r1	; 2
    DDRB = 0xFF; PORTB = 0x00;
 dce:	84 b9       	out	0x04, r24	; 4
 dd0:	15 b8       	out	0x05, r1	; 5
    DDRC = 0xF0; PORTC = 0x0F;
 dd2:	80 ef       	ldi	r24, 0xF0	; 240
 dd4:	87 b9       	out	0x07, r24	; 7
 dd6:	8f e0       	ldi	r24, 0x0F	; 15
 dd8:	88 b9       	out	0x08, r24	; 8
    
    tasksNum = 3; // declare number of tasks
 dda:	83 e0       	ldi	r24, 0x03	; 3
 ddc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <tasksNum>
    task tsks[3]; // initialize the task array
    tasks = tsks; // set the task array
 de0:	ce 01       	movw	r24, r28
 de2:	01 96       	adiw	r24, 0x01	; 1
 de4:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <tasks+0x1>
 de8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <tasks>
    
    // define tasks
    unsigned char i=0; // task counter
    tasks[i].state = USART_start;
 dec:	19 82       	std	Y+1, r1	; 0x01
    tasks[i].period = 50;
 dee:	82 e3       	ldi	r24, 0x32	; 50
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	a0 e0       	ldi	r26, 0x00	; 0
 df4:	b0 e0       	ldi	r27, 0x00	; 0
 df6:	8a 83       	std	Y+2, r24	; 0x02
 df8:	9b 83       	std	Y+3, r25	; 0x03
 dfa:	ac 83       	std	Y+4, r26	; 0x04
 dfc:	bd 83       	std	Y+5, r27	; 0x05
    tasks[i].elapsedTime = tasks[i].period;
 dfe:	8e 83       	std	Y+6, r24	; 0x06
 e00:	9f 83       	std	Y+7, r25	; 0x07
 e02:	a8 87       	std	Y+8, r26	; 0x08
 e04:	b9 87       	std	Y+9, r27	; 0x09
    tasks[i].TickFct = &TickFct_USART;
 e06:	25 e8       	ldi	r18, 0x85	; 133
 e08:	34 e0       	ldi	r19, 0x04	; 4
 e0a:	3b 87       	std	Y+11, r19	; 0x0b
 e0c:	2a 87       	std	Y+10, r18	; 0x0a
    ++i;
    tasks[i].state = Keypad_start;
 e0e:	1c 86       	std	Y+12, r1	; 0x0c
    tasks[i].period = 50;
 e10:	8d 87       	std	Y+13, r24	; 0x0d
 e12:	9e 87       	std	Y+14, r25	; 0x0e
 e14:	af 87       	std	Y+15, r26	; 0x0f
 e16:	b8 8b       	std	Y+16, r27	; 0x10
    tasks[i].elapsedTime = tasks[i].period;
 e18:	89 8b       	std	Y+17, r24	; 0x11
 e1a:	9a 8b       	std	Y+18, r25	; 0x12
 e1c:	ab 8b       	std	Y+19, r26	; 0x13
 e1e:	bc 8b       	std	Y+20, r27	; 0x14
    tasks[i].TickFct = &TickFct_Keypad;
 e20:	2e ec       	ldi	r18, 0xCE	; 206
 e22:	33 e0       	ldi	r19, 0x03	; 3
 e24:	3e 8b       	std	Y+22, r19	; 0x16
 e26:	2d 8b       	std	Y+21, r18	; 0x15
	++i;
	tasks[i].state = LCD_start;
 e28:	1f 8a       	std	Y+23, r1	; 0x17
	tasks[i].period = 50;
 e2a:	88 8f       	std	Y+24, r24	; 0x18
 e2c:	99 8f       	std	Y+25, r25	; 0x19
 e2e:	aa 8f       	std	Y+26, r26	; 0x1a
 e30:	bb 8f       	std	Y+27, r27	; 0x1b
	tasks[i].elapsedTime = tasks[i].period;
 e32:	8c 8f       	std	Y+28, r24	; 0x1c
 e34:	9d 8f       	std	Y+29, r25	; 0x1d
 e36:	ae 8f       	std	Y+30, r26	; 0x1e
 e38:	bf 8f       	std	Y+31, r27	; 0x1f
	tasks[i].TickFct = &TickFct_LCD;
 e3a:	80 eb       	ldi	r24, 0xB0	; 176
 e3c:	95 e0       	ldi	r25, 0x05	; 5
 e3e:	99 a3       	std	Y+33, r25	; 0x21
 e40:	88 a3       	std	Y+32, r24	; 0x20
    
    
    TimerSet(50); // value set should be GCD of all tasks
 e42:	62 e3       	ldi	r22, 0x32	; 50
 e44:	70 e0       	ldi	r23, 0x00	; 0
 e46:	80 e0       	ldi	r24, 0x00	; 0
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	f5 d9       	rcall	.-3094   	; 0x236 <TimerSet>
    TimerOn();
 e4c:	05 da       	rcall	.-3062   	; 0x258 <TimerOn>
 e4e:	ff cf       	rjmp	.-2      	; 0xe4e <main+0x9a>

00000e50 <atoi>:
 e50:	fc 01       	movw	r30, r24
 e52:	88 27       	eor	r24, r24
 e54:	99 27       	eor	r25, r25
 e56:	e8 94       	clt
 e58:	21 91       	ld	r18, Z+
 e5a:	20 32       	cpi	r18, 0x20	; 32
 e5c:	e9 f3       	breq	.-6      	; 0xe58 <atoi+0x8>
 e5e:	29 30       	cpi	r18, 0x09	; 9
 e60:	10 f0       	brcs	.+4      	; 0xe66 <atoi+0x16>
 e62:	2e 30       	cpi	r18, 0x0E	; 14
 e64:	c8 f3       	brcs	.-14     	; 0xe58 <atoi+0x8>
 e66:	2b 32       	cpi	r18, 0x2B	; 43
 e68:	39 f0       	breq	.+14     	; 0xe78 <atoi+0x28>
 e6a:	2d 32       	cpi	r18, 0x2D	; 45
 e6c:	31 f4       	brne	.+12     	; 0xe7a <atoi+0x2a>
 e6e:	68 94       	set
 e70:	03 c0       	rjmp	.+6      	; 0xe78 <atoi+0x28>
 e72:	12 d0       	rcall	.+36     	; 0xe98 <__mulhi_const_10>
 e74:	82 0f       	add	r24, r18
 e76:	91 1d       	adc	r25, r1
 e78:	21 91       	ld	r18, Z+
 e7a:	20 53       	subi	r18, 0x30	; 48
 e7c:	2a 30       	cpi	r18, 0x0A	; 10
 e7e:	c8 f3       	brcs	.-14     	; 0xe72 <atoi+0x22>
 e80:	1e f4       	brtc	.+6      	; 0xe88 <atoi+0x38>
 e82:	90 95       	com	r25
 e84:	81 95       	neg	r24
 e86:	9f 4f       	sbci	r25, 0xFF	; 255
 e88:	08 95       	ret

00000e8a <memset>:
 e8a:	dc 01       	movw	r26, r24
 e8c:	01 c0       	rjmp	.+2      	; 0xe90 <memset+0x6>
 e8e:	6d 93       	st	X+, r22
 e90:	41 50       	subi	r20, 0x01	; 1
 e92:	50 40       	sbci	r21, 0x00	; 0
 e94:	e0 f7       	brcc	.-8      	; 0xe8e <memset+0x4>
 e96:	08 95       	ret

00000e98 <__mulhi_const_10>:
 e98:	7a e0       	ldi	r23, 0x0A	; 10
 e9a:	97 9f       	mul	r25, r23
 e9c:	90 2d       	mov	r25, r0
 e9e:	87 9f       	mul	r24, r23
 ea0:	80 2d       	mov	r24, r0
 ea2:	91 0d       	add	r25, r1
 ea4:	11 24       	eor	r1, r1
 ea6:	08 95       	ret

00000ea8 <_exit>:
 ea8:	f8 94       	cli

00000eaa <__stop_program>:
 eaa:	ff cf       	rjmp	.-2      	; 0xeaa <__stop_program>
